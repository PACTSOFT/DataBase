USE PACT2C222
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spPAY_RptGetVacationLedger]
	@EmpWhere [nvarchar](max) = NULL,
	@FromDate [datetime],
	@ToDate [datetime],
	@CCWhere [nvarchar](max) = NULL
WITH ENCRYPTION, EXECUTE AS CALLER
AS
SET NOCOUNT ON

DECLARE @STARTDATE DATETIME
	,@ENDDATE DATETIME
	,@VFD DATETIME
	,@VTD DATETIME
	,@DOJ DATETIME
	,@LASON DATETIME
	,@MONT1 DATETIME
	,@MONT2 DATETIME
	,@DOJ1 DATETIME,
	@Calculatevacdayforvacationperiod Varchar(3),
	@ExcessDaysAsLOP Varchar(3),
	@FDate Datetime,@TDate Datetime,@BDays FLOAT,
	@VacTaken FLOAT,@EnDays FLOAT,@DonotshownegitiveOPvacationdays NVARCHAR(6),@ConsiderLOPwhilecalculatingcreditdays NVARCHAR(6),@DJ datetime
	DECLARE @LOPDAYS FLOAT, @CreditDaysCalculation Int,@FSEncashDays FLOAT


	SET @VacTaken=0 SET @EnDays=0

DECLARE @EMPNAME NVARCHAR(MAX)
	,@EMPCODE NVARCHAR(MAX)
	,@STRFROMDATERANGE NVARCHAR(MAX)
	,@STRTODATERANGE NVARCHAR(MAX)
	,@FMONTH DATETIME
	,@TMONTH DATETIME
DECLARE @EncashDays FLOAT
	,@RC1 INT
	,@VDays FLOAT
	,@VacationMonthsDiff FLOAT
	,@OPB FLOAT
	,@GRADE INT
	,@I INT
	,@TRC INT
	,@OPENINGBAL FLOAT
	,@VACDAYSPERIOD NVARCHAR(10)
	,@VACDAYSPERMONTH FLOAT
DECLARE @J INT
	,@RC INT
	,@NODEID BIGINT
	,@STRVACDAYS FLOAT,@VT FLOAT
	,@STRVACDAYS1 FLOAT
	,@K INT
	,@KK INT
	,@EID BIGINT
	,@ACVDAYS FLOAT
DECLARE @TAB TABLE (
	ID BIGINT IDENTITY(1, 1)
	,NODEID BIGINT
	,EMPCODE NVARCHAR(MAX)
	,EMPNAME NVARCHAR(MAX)
	,DOJ DATETIME
	,GRADE INT
	,SERVICEDAYS FLOAT
	,MONTHDIFF FLOAT
	,OPENING FLOAT
	,OPENINGBAL FLOAT
	,LEAVEASONDATE DATETIME
	,DOJ1 DATETIME
	,VACDAYSPERIOD NVARCHAR(10)
	,VACDAYSPERMONTH FLOAT
	)

CREATE TABLE #TABVAC (
	ID BIGINT IDENTITY(1, 1)
	,FROMDATE DATETIME
	,TODATE DATETIME
	,VACDAYS FLOAT
	)

DECLARE @MonthDays TABLE (
	ID BIGINT Identity(1, 1)
	,EMPNODE BIGINT
	,EMPCODE NVARCHAR(MAX)
	,EMPNAME NVARCHAR(MAX)
	,DATEOFJ DATETIME
	,FDATE DATETIME
	,TDATE DATETIME
	,TOTALDAYS FLOAT
	,ACTUALDAYS FLOAT
	,Days FLOAT
	,DAYSASON FLOAT
	,VACDAYS FLOAT
	,VACSTARTDATE NVARCHAR(MAX)
	,VACENDDATE NVARCHAR(MAX)
	,BALANCE FLOAT
	,OPENINGBAL FLOAT
	,OPBDATE DATETIME
	)

SET @STARTDATE = @FromDate
SET @ENDDATE = @ToDate

SELECT @DonotshownegitiveOPvacationdays=ISNULL(VALUE,'False') FROM ADM_GlobalPreferences WITH(NOLOCK) WHERE Name='DonotshownegitiveOPvacationdays'

DECLARE @GrWiseVac BIT
SELECT @GrWiseVac=ISNULL(VALUE,'False') FROM ADM_GlobalPreferences WITH(NOLOCK) WHERE Name='GradeWiseVacation'
--select @GrWiseVac

DECLARE @S1 NVARCHAR(MAX)
SET @S1=''

SET @S1='
SELECT C51.NODEID,C51.CODE,C51.NAME,CASE WHEN convert(DATETIME, OPLeavesAsOn) <> ''01 Jan 1900'' THEN convert(DATETIME, OPLeavesAsOn) ELSE CONVERT(DATETIME, C51.DOJ) END
	,CC.CCNID53
	,DATEDIFF(D, CONVERT(DATETIME, C51.DOJ), CONVERT(DATETIME, '''+CONVERT(NVARCHAR,@STARTDATE,106)+'''))
	,DATEDIFF(MONTH, CONVERT(DATETIME, CASE 
				WHEN convert(DATETIME, OPLeavesAsOn) <> ''01 Jan 1900''
					THEN convert(DATETIME, OPLeavesAsOn)
				ELSE CONVERT(DATETIME, C51.DOJ)
				END), CONVERT(DATETIME, '''+CONVERT(NVARCHAR,@ENDDATE,106)+'''))
	,0 
	,ISNULL(C51.OpVacationDays, 0)
	,convert(DATETIME, OPLeavesAsOn)
	,CONVERT(DATETIME, C51.DOJ)
	,C51.VACDAYSPERIOD
	,C51.VACDAYSPERMONTH
FROM COM_CC50051 C51 WITH (NOLOCK)
	,COM_CCCCDATA CC WITH (NOLOCK)
WHERE CC.NODEID = C51.NODEID
	AND CC.COSTCENTERID = 50051
	AND C51.IsGroup=0 AND C51.NODEID > 2 '

IF(LEN(@EmpWhere)>0)
SET @S1=@S1 +' AND C51.NodeID IN(' +@EmpWhere+') '

IF(LEN(@CCWhere)>0)
SET @S1=@S1 +@CCWhere

print @S1

INSERT INTO @TAB
EXEC (@S1)

--SELECT * FROM @TAB

 --AND C51.NODEID IN (10)
-- AND CC.CCNID2 IN (5)


SET @STRVACDAYS1 = 0
SET @I = 1

SELECT @TRC = COUNT(*)
FROM @TAB

--VMDD
	DECLARE @VacMgmtDocID BIGINT, @IsDefineDaysExists BIT
	CREATE TABLE #VMDD(FromMonth INT,ToMonth INT,DaysPerMonth FLOAT,ApplyToPrevMonths NVARCHAR(50))
	CREATE TABLE #VacMonthWiseAllotedDays(ID INT Identity(1,1),VacMonth DateTime,AllotedDays FLOAT,Yearly FLOAT)
--VMDD

-- ALL EMPLOYEES VACATIAON DATA
SELECT a.InvDocDetailsID,a.DocSeqNo, b.dcCCNID51 as EmpSeqNo,
CASE WHEN d.dcAlpha1 IS NOT NULL AND ISDATE(d.dcAlpha1)=1   THEN CONVERT(DATETIME,d.dcAlpha1) ELSE NULL END as ReJoinDate,
CASE WHEN ISDATE(d.dcAlpha2) = 1 THEN CONVERT(DATETIME,d.dcAlpha2) ELSE NULL END as FromDate,
CASE WHEN ISDATE(d.dcAlpha3) = 1 THEN CONVERT(DATETIME,d.dcAlpha3) ELSE NULL END as ToDate,
CASE WHEN  d.dcAlpha4 iS NOT NULL AND ISNUMERIC( d.dcAlpha4)=1 THEN ISNULL(CONVERT(FLOAT, d.dcAlpha4), 0) ELSE 0 END as NoOfDays,
ISNULL(CONVERT(FLOAT, d.dcAlpha11), 0) as ExcessDays,ISNULL(CONVERT(FLOAT, d.dcAlpha14), 0) as EncashDays
INTO #ALLEMPVACDATA

	FROM INV_DocDetails a WITH (NOLOCK)
	JOIN COM_DocCCData b WITH (NOLOCK) ON b.INVDOCDETAILSID = a.INVDOCDETAILSID
	JOIN COM_DocTextData d WITH (NOLOCK) ON d.INVDOCDETAILSID = a.INVDOCDETAILSID
	WHERE 1=1 AND a.CostCenterID = 40072 AND a.StatusID = 369 AND DocSeqNo=1
		AND b.dcCCNID51 IN (SELECT NODEID FROM @TAB )
		AND LEN(d.dcAlpha2) = 11
		AND LEN(d.dcAlpha3) = 11
		AND ISDATE(d.dcAlpha2) = 1
		AND ISDATE(d.dcAlpha3) = 1
		AND ISNUMERIC(d.dcAlpha4) = 1
		AND ISNUMERIC(d.dcAlpha11) = 1
	ORDER BY CONVERT(DATETIME, d.dcAlpha2)
-- ALL VACATAION MANAGEMENT DATA
SELECT a.InvDocDetailsID,a.DocSeqNo,a.DocID, b.dcCCNID53 as GradeSeqNo,
ISNULL(d.DCALPHA3, '0') as dcAlpha3,ISNULL(d.DCALPHA4, '0') as dcAlpha4,
ISNULL(d.DCALPHA8,'NO') as dcAlpha8 ,ISNULL(d.DCALPHA9,'NO') as dcAlpha9 ,ISNULL(d.dcAlpha15,'NO') as dcAlpha15 ,ISNULL(d.DCALPHA18,'1') as dcAlpha18 
INTO #ALLVACMGTDATA

	FROM INV_DocDetails a WITH (NOLOCK)
	JOIN COM_DocCCData b WITH (NOLOCK) ON b.INVDOCDETAILSID = a.INVDOCDETAILSID
	JOIN COM_DocTextData d WITH (NOLOCK) ON d.INVDOCDETAILSID = a.INVDOCDETAILSID
	WHERE 1=1 AND DocSeqNo=1
	AND a.CostCenterID=40061	

--ALL EMPS MONTHLY PAYROLL DATA
SELECT dcCCNID51 as EmpSeqNo,CONVERT(FLOAT,TD.DCALPHA9) DCALPHA9,CONVERT(DATETIME,ID.DUEDATE) DUEDATE
INTO #ALLEMPMONDATA
FROM COM_DOCTEXTDATA TD 
INNER JOIN INV_DOCDETAILS ID ON TD.INVDOCDETAILSID=ID.INVDOCDETAILSID 
Inner Join com_DocccData cc on cc.invDocdetailsid=ID.invDocdetailsid
Where CostcenterID=40054 and cc.dcCCNID51 IN (SELECT NODEID FROM @TAB) 
AND ISNUMERIC(TD.DCALPHA9)=1

--ALL EMPS FSENCASH DAYS
SELECT CC.dcCCNID51 as EmpSeqNo,ISNULL(CONVERT(FLOAT, t.dcAlpha15), 0) FSEncashDays,CONVERT(DATETIME,dcAlpha3) ResgDate 
INTO #ALLEMPFSENCASHDATA
FROM INV_DocDetails I WITH(NOLOCK)
JOIN COM_DocCCData CC WITH(NOLOCK) ON CC.InvDocDetailsID=I.InvDocDetailsID
JOIN COM_DocTextData T WITH(NOLOCK) ON T.InvDocDetailsID=I.InvDocDetailsID
JOIN COM_DocNumData N WITH(NOLOCK) ON N.InvDocDetailsID=I.InvDocDetailsID
JOIN COM_CC50052 C52 WITH(NOLOCK) ON C52.Name=dcAlpha12 AND C52.Name IN (SELECT distinct C52.Name VacationField
 FROM INV_DOCDETAILS ID WITH(NOLOCK) 
 JOIN COM_DOCTEXTDATA TD WITH(NOLOCK) ON ID.INVDOCDETAILSID=TD.INVDOCDETAILSID 
 JOIN COM_CC50052 C52 WITH(NOLOCK) ON C52.NodeID=TD.dcAlpha1
 WHERE ID.COSTCENTERID=40061 AND ID.StatusID=369	)
WHERE I.CostCenterID=40095 AND dcAlpha1='2' AND dcAlpha10='Partial' AND ISDATE(dcAlpha3)=1 and cc.dcCCNID51 IN (SELECT NODEID FROM @TAB)




Declare @VCnt INT
SET @VCnt=0

WHILE (@I <= @TRC)
BEGIN
	SET @STRVACDAYS = 0
	SET @STRVACDAYS1 = 0
	SET @VT=0
	SET @VacationMonthsDiff = 0
	SET @VACDAYSPERIOD = ''
	SET @VACDAYSPERMONTH = 0

	SELECT @NODEID = NODEID
		,@EMPNAME = EMPNAME
		,@EMPCODE = EMPCODE
		,@GRADE = CASE WHEN @GrWiseVac=1 THEN GRADE ELSE 1 END
		,@VACDAYSPERIOD = VACDAYSPERIOD
		,@VACDAYSPERMONTH = VACDAYSPERMONTH
		,@VacationMonthsDiff = MONTHDIFF
		,@DOJ = DOJ
		,@DOJ1 = DOJ1
		,@OPENINGBAL = OPENINGBAL
		,@LASON = LEAVEASONDATE
	FROM @TAB
	WHERE ID = @I

	--VMDD
	SET @VacMgmtDocID=0 

	TRUNCATE TABLE #VMDD
	TRUNCATE TABLE #VacMonthWiseAllotedDays
	--VMDD


	SELECT @ConsiderLOPwhilecalculatingcreditdays=DCALPHA8,@Calculatevacdayforvacationperiod=DCALPHA9,@ExcessDaysAsLOP=dcAlpha15,
	@VacMgmtDocID=DocID ,@CreditDaysCalculation=DCALPHA18
	FROM #ALLVACMGTDATA
	WHERE GradeSeqNo = ( CASE WHEN @GrWiseVac=1 THEN  (SELECT GRADE FROM @TAB WHERE NODEID=@NODEID) ELSE 1 END )

---------------------------------------------------------------------------------
--VMDD
	SET @IsDefineDaysExists=0
	IF EXISTS (SELECT SeqNo FROM PAY_VacManageDefineDays WITH(NOLOCK) WHERE VMDocID=@VacMgmtDocID)
	BEGIN
		SET @IsDefineDaysExists=1
		INSERT INTO #VMDD
		SELECT FromMonth,ToMonth,DaysPerMonth,ApplyToPrevMonths 
		FROM PAY_VacManageDefineDays WITH(NOLOCK) WHERE VMDocID=@VacMgmtDocID

		declare @dtt1 datetime,@dtt2 datetime,@TotMon INT,@AllotedDays FLOAT,@MNo INT,@APM NVARCHAR(50),@YearlyVD FLOAT
		set @dtt1=dateadd(day,-datepart(day,@DOJ1)+1,@DOJ1)
		set @dtt2=dateadd(day,-datepart(day,@ENDDATE)+1,@ENDDATE)
		set @dtt2=DATEADD(year,1,@dtt2) -- adding extra 1 year to know the yearly vacation days
		SET @MNo=0
		WHILE(@dtt1<=@dtt2)
		BEGIN
			SET @MNo=@MNo+1
			
			SELECT @AllotedDays=DaysPerMonth,@APM=ApplyToPrevMonths FROM #VMDD WHERE @MNo BETWEEN FromMonth AND ToMonth
			INSERT INTO #VacMonthWiseAllotedDays
			SELECT @dtt1,@AllotedDays,-1

			IF(@APM='Yes')
				UPDATE #VacMonthWiseAllotedDays SET AllotedDays=@AllotedDays

			IF(@MNo%12)=0
			BEGIN
				SELECT @YearlyVD=SUM(AllotedDays) FROM #VacMonthWiseAllotedDays WHERE Yearly=-1
				
				IF(@APM='Yes')
					UPDATE #VacMonthWiseAllotedDays SET Yearly=@YearlyVD
				ELSE
					UPDATE #VacMonthWiseAllotedDays SET Yearly=@YearlyVD WHERE Yearly=-1

			END

		 SET @dtt1=DATEADD(month,1,@dtt1)
		END

	END
	--SELECT * FROM #VacMonthWiseAllotedDays
--VMDD
---------------------------------------------------------------------------------

	INSERT INTO @MonthDays
	VALUES (
		@NODEID
		,@EMPCODE
		,'Opening'
		,NULL
		,NULL
		,NULL
		,0
		,0
		,0
		,0
		,0
		,''
		,''
		,0
		,0
		,@LASON
		)



	SET @RC1 = 0

	WHILE (@RC1 <= @VacationMonthsDiff)
	BEGIN
		IF (@RC1 = 0)
		BEGIN
			SET @MONT1 = DATEADD(MONTH, @RC1, @DOJ)
			SET @MONT2 = DATEADD(D, 0, DATEADD(D, - 1, DATEADD(MM, DATEDIFF(M, 0, @DOJ) + 1, 0)))
		END
		ELSE IF (@RC1 = @VacationMonthsDiff)
		BEGIN
			SET @MONT1 = DATEADD(MONTH, @RC1, DATEADD(M, DATEDIFF(M, 0, @DOJ), 0))
			SET @MONT2 = DATEADD(D, - 1, DATEADD(MM, DATEDIFF(M, 0, @MONT1) + 1, 0))
		END
		ELSE
		BEGIN
			SET @MONT1 = DATEADD(MONTH, @RC1, DATEADD(M, DATEDIFF(M, 0, @DOJ), 0))
			SET @MONT2 = DATEADD(D, - 1, DATEADD(MM, DATEDIFF(M, 0, @MONT1) + 1, 0))
		END

		INSERT INTO @MonthDays
		VALUES (
			@NODEID
			,@EMPCODE
			,@EMPNAME
			,@DOJ1
			,@MONT1
			,@MONT2
			,DATEDIFF(D, DATEADD(MONTH, 0, DATEADD(M, DATEDIFF(M, 0, @MONT1), 0)), DATEADD(D, - 1, DATEADD(MM, DATEDIFF(M, 0, @MONT2) + 1, 0))) + 1
			,DATEDIFF(D, @MONT1, @MONT2) + 1
			,0
			,CASE 
				WHEN DATEADD(M, 6, CONVERT(DATETIME, @DOJ1)) > CONVERT(DATETIME, @ENDDATE)
					THEN ISNULL((
									SELECT DCALPHA3 FROM #ALLVACMGTDATA WHERE GradeSeqNo=@GRADE
								), 0)
				WHEN DATEADD(M, 12, CONVERT(DATETIME, @DOJ1)) > CONVERT(DATETIME, @ENDDATE)
					THEN ISNULL((
								SELECT DCALPHA4 FROM #ALLVACMGTDATA WHERE GradeSeqNo=@GRADE
								), '0')
				ELSE (
						CASE @VACDAYSPERIOD
							WHEN 'Yearly'
								THEN ROUND((CAST(@VACDAYSPERMONTH AS FLOAT) / CAST (12 AS FLOAT)),2,1)
							ELSE @VACDAYSPERMONTH
							END
						)
				END
			,0
			,''
			,''
			,0
			,0
			,NULL
			)

--VMDD
IF(@IsDefineDaysExists=1)
BEGIN
	Update @MonthDays
	SET DAYSASON=b.AllotedDays
	FROM @MonthDays a
	JOIN #VacMonthWiseAllotedDays b ON MONTH(b.VacMonth)=MONTH(a.FDATE) AND YEAR(b.VacMonth)=YEAR(a.FDATE)
END

--VMDD

SET @VacTaken=0 SET @EnDays=0
SET @VCnt=0

SELECT @VCnt=EmpSeqNo FRom #ALLEMPVACDATA
WHERE EmpSeqNo=@NODEID AND ( (FromDate BETWEEN @MONT1 AND @MONT2) OR 
							(ToDate BETWEEN @MONT1 AND @MONT2) OR
							(@MONT1 BETWEEN FromDate AND ToDate) OR
							(@MONT2 BETWEEN FromDate AND ToDate) 
							)
			IF(@VCnt>0)
			BEGIN
				EXEC spPAY_GetVacationLeavesInfo @MONT1
							,@MONT2
							,@NODEID
							,1
							,1
							,1,@VacTaken OUTPUT,@EnDays OUTPUT
			END
			SET @VT=@VacTaken

			IF(ISNULL(@Calculatevacdayforvacationperiod,'NO')='NO' AND @VT IS NOT NULL AND @VT>0 )
				BEGIN
					--SELECT @VT,@MONT1,@MONT2
					UPDATE @MonthDays
					SET ACTUALDAYS=TOTALDAYS-@VT
					WHERE EMPNODE = @NODEID
					AND SUBSTRING(CONVERT(VARCHAR(12), FDATE, 106), 4, 8) = SUBSTRING(CONVERT(VARCHAR(12), @MONT1, 106), 4, 8)
				END

		UPDATE @MONTHDAYS
		SET OPENINGBAL = @OPENINGBAL
		WHERE @LASON <> 'Jan  1 1900 12:00AM'
			AND EMPNODE = @NODEID
			AND EMPNAME = 'OPENING'

		SET @RC1 = @RC1 + 1
	END

	IF(@CreditDaysCalculation=1)
	BEGIN
		UPDATE @MonthDays
		SET Days = ROUND((( CAST(ACTUALDAYS AS FLOAT) * CAST(DAYSASON AS FLOAT) ) / CAST(TOTALDAYS AS FLOAT)),2,1)
		WHERE EMPNODE = @NODEID
		AND EMPNAME <> 'OPENING'
	END
	ELSE
	BEGIN
		UPDATE @MonthDays
		SET Days = ROUND((( CAST(@VacDaysPerMonth AS FLOAT) / CAST(365 AS FLOAT) )* CAST(ACTUALDAYS AS FLOAT) ),2,1)
		WHERE EMPNODE = @NODEID
		AND EMPNAME <> 'OPENING'
	END

	SET @I = @I + 1
END

--SELECT * FROM @MonthDays

SET @K = 1

SELECT @KK = COUNT(*)
FROM @MonthDays

DECLARE CUR1 CURSOR FAST_FORWARD FOR
SELECT ID,FDATE,TDATE,EMPNODE
FROM @MONTHDAYS
OPEN CUR1
FETCH NEXT FROM CUR1 INTO @K,@FMONTH,@TMONTH,@EID
WHILE @@FETCH_STATUS=0
BEGIN

--------------------

	SET @ACVDAYS = 0
	SET @STRVACDAYS = 0
	SET @VT=0
	SET @STRFROMDATERANGE = ''
	SET @STRTODATERANGE = ''
	

	SELECT @DJ=DOJ FROM @TAB WHERE NODEID=@EID

	SELECT @ConsiderLOPwhilecalculatingcreditdays=DCALPHA8,@Calculatevacdayforvacationperiod=DCALPHA9,@ExcessDaysAsLOP=dcAlpha15,@CreditDaysCalculation=DCALPHA18
	FROM #ALLVACMGTDATA
	WHERE GradeSeqNo = (CASE WHEN @GrWiseVac=1 THEN ( SELECT GRADE FROM @TAB WHERE NODEID=@EID) ELSE 1 END )

	SET @LOPDAYS=0

	IF(@ConsiderLOPwhilecalculatingcreditdays='Yes')
	BEGIN

		SELECT @LOPDAYS=DCALPHA9
		FROM #ALLEMPMONDATA
		WHERE EmpSeqNo=@EID AND DUEDATE BETWEEN @FMONTH AND @TMONTH

			IF (SUBSTRING(CONVERT(VARCHAR(12), @FMONTH, 106), 4, 8) <> SUBSTRING(CONVERT(VARCHAR(12), @DJ, 106), 4, 8))
		begin
			UPDATE @MonthDays
			SET ACTUALDAYS=TOTALDAYS-ISNULL(@LOPDAYS,0)
			WHERE EMPNODE = @EID
			and fdate=@FMONTH and Tdate=@TMONTH
			AND ID = @K
			
			IF(@CreditDaysCalculation=1)
			BEGIN
				UPDATE @MonthDays
				SET Days = ROUND((( CAST(ACTUALDAYS AS FLOAT) * CAST(DAYSASON AS FLOAT) ) / CAST(TOTALDAYS AS FLOAT)),2,1),
				DAYSASON = ROUND((( CAST(ACTUALDAYS AS FLOAT) * CAST(DAYSASON AS FLOAT) ) / CAST(TOTALDAYS AS FLOAT)),2,1)
				WHERE EMPNODE = @EID
				and fdate=@FMONTH and Tdate=@TMONTH
				AND ID = @K
			END
			ELSE
			BEGIN
				UPDATE @MonthDays
				SET Days = ROUND((( CAST(@VacDaysPerMonth AS FLOAT) / CAST(365 AS FLOAT) )* CAST(ACTUALDAYS AS FLOAT) ),2,1),
				DAYSASON = ROUND((( CAST(@VacDaysPerMonth AS FLOAT) / CAST(365 AS FLOAT) )* CAST(ACTUALDAYS AS FLOAT) ),2,1)
				WHERE EMPNODE = @EID
				and fdate=@FMONTH and Tdate=@TMONTH
				AND ID = @K
			END
		end
		ELSE
		begin
		UPDATE @MonthDays
			SET ACTUALDAYS=ACTUALDAYS-ISNULL(@LOPDAYS,0)
			WHERE EMPNODE = @EID
			and fdate=@FMONTH and Tdate=@TMONTH
			AND ID = @K
			
			IF(@CreditDaysCalculation=1)
			BEGIN
				UPDATE @MonthDays
				SET Days = ROUND((( CAST(ACTUALDAYS AS FLOAT) * CAST(DAYSASON AS FLOAT) ) / CAST(TOTALDAYS AS FLOAT)),2,1),
				DAYSASON = ROUND((( CAST(ACTUALDAYS AS FLOAT) * CAST(DAYSASON AS FLOAT) ) / CAST(TOTALDAYS AS FLOAT)),2,1)
				WHERE EMPNODE = @EID
				and fdate=@FMONTH and Tdate=@TMONTH
				AND ID = @K
			END
			ELSE
			BEGIN
				UPDATE @MonthDays
				SET Days = ROUND((( CAST(@VacDaysPerMonth AS FLOAT) / CAST(365 AS FLOAT) )* CAST(ACTUALDAYS AS FLOAT) ),2,1),
				DAYSASON = ROUND((( CAST(@VacDaysPerMonth AS FLOAT) / CAST(365 AS FLOAT) )* CAST(ACTUALDAYS AS FLOAT) ),2,1)
				WHERE EMPNODE = @EID
				and fdate=@FMONTH and Tdate=@TMONTH
				AND ID = @K
			END
		end
	END

	SELECT @OPB = OPENINGBAL
	FROM @MonthDays
	WHERE EMPNODE = @EID
		AND ID = @K

	SELECT @ACVDAYS = BALANCE
	FROM @MonthDays
	WHERE ID = @K - 1
		AND EMPNODE = @EID

		--if(@k=16)
		--select * from @MonthDays
	--SELECT @ACVDAYS, DAYS,@OPB FROM @MonthDays
	--WHERE ID = @K 

	SELECT @ACVDAYS = ROUND((ISNULL(@ACVDAYS, 0) + DAYS + @OPB),2)
	FROM @MonthDays
	WHERE ID = @K
		AND EMPNODE = @EID

	UPDATE @MonthDays
	SET BALANCE = ROUND(@ACVDAYS, 2)
	WHERE ID = @K
	AND EMPNODE = @EID

	TRUNCATE TABLE #TABVAC

	INSERT INTO #TABVAC

	SELECT FromDate,
	CASE WHEN ISNULL(ReJoinDate,'')='' THEN ToDate WHEN ReJoinDate < ToDate THEN CONVERT(DateTime,DATEADD(D,-1,ReJoinDate)) ELSE ToDate END AS ToDate,
	CASE WHEN ISNULL(ReJoinDate,'')='' THEN NoOfDays WHEN ReJoinDate < ToDate then DATEDIFF(D,CONVERT(DATETIME, FromDate),CONVERT(DateTime,DATEADD(D,-1,ReJoinDate))) else NoOfDays END AS NoOfDays
	FROM #ALLEMPVACDATA
	WHERE EmpSeqNo=@EID
	AND (
			(
				FromDate BETWEEN CONVERT(DATETIME, CONVERT(NVARCHAR, @FMONTH))
					AND CONVERT(DATETIME, CONVERT(NVARCHAR, @TMONTH))
				)
			OR (
				ToDate BETWEEN CONVERT(DATETIME, CONVERT(NVARCHAR, @FMONTH))
					AND CONVERT(DATETIME, CONVERT(NVARCHAR, @TMONTH))	
				)
			OR (
				CONVERT(DATETIME, CONVERT(NVARCHAR, @FMONTH)) BETWEEN FromDate AND ToDate
				)
			OR (
				CONVERT(DATETIME, CONVERT(NVARCHAR, @TMONTH)) BETWEEN FromDate AND ToDate
				)
			)
	ORDER BY FromDate



	SELECT @RC = COUNT(*)
	FROM #TABVAC
	
	SET @J = 1


	DECLARE CUR2 CURSOR FAST_FORWARD FOR
	SELECT ID,FROMDATE,TODATE,vacdays
	FROM #TABVAC
	OPEN CUR2
	FETCH NEXT FROM CUR2 INTO @J,@VFD,@VTD,@VDays
	WHILE @@FETCH_STATUS=0
	BEGIN
		 
		IF (@VFD >= @FMONTH)
		BEGIN
			IF (@VTD <= @TMONTH)
			BEGIN
		
				IF (SUBSTRING(CONVERT(VARCHAR(12), @VFD, 106), 4, 8) <> SUBSTRING(CONVERT(VARCHAR(12), @VTD, 106), 4, 8))
				BEGIN
					SET @VacTaken=0 SET @EnDays=0

					EXEC spPAY_GetVacationLeavesInfo @VFD
						,@VTD
						,@EID
						,1
						,1
						,1,@VacTaken OUTPUT,@EnDays OUTPUT

						SET @STRVACDAYS=@VacTaken
				END
				ELSE
					SET @STRVACDAYS = @VDays
				
			
				IF(ISNULL(@Calculatevacdayforvacationperiod,'NO')='NO' )
				BEGIN
					SET @VT=@STRVACDAYS
					
					UPDATE @MonthDays
					SET ACTUALDAYS=TOTALDAYS-@VT-ISNULL(@LOPDAYS,0)
					WHERE EMPNODE = @EID
					AND SUBSTRING(CONVERT(VARCHAR(12), FDATE, 106), 4, 8) = SUBSTRING(CONVERT(VARCHAR(12), @VFD, 106), 4, 8)
					AND ID = @K

					IF(@CreditDaysCalculation=1)
					BEGIN
						UPDATE @MonthDays
						SET Days = ROUND((( CAST(ACTUALDAYS AS FLOAT) * CAST(DAYSASON AS FLOAT) ) / CAST(TOTALDAYS AS FLOAT)),2,1),
						DAYSASON = ROUND((( CAST(ACTUALDAYS AS FLOAT) * CAST(DAYSASON AS FLOAT) ) / CAST(TOTALDAYS AS FLOAT)),2,1)
						WHERE EMPNODE = @EID
						AND SUBSTRING(CONVERT(VARCHAR(12), FDATE, 106), 4, 8) = SUBSTRING(CONVERT(VARCHAR(12), @VFD, 106), 4, 8)
						AND ID = @K
					END
					ELSE
					BEGIN
						UPDATE @MonthDays
						SET Days = ROUND((( CAST(@VacDaysPerMonth AS FLOAT) / CAST(365 AS FLOAT) )* CAST(ACTUALDAYS AS FLOAT) ),2,1),
						DAYSASON = ROUND((( CAST(@VacDaysPerMonth AS FLOAT) / CAST(365 AS FLOAT) )* CAST(ACTUALDAYS AS FLOAT) ),2,1)
						WHERE EMPNODE = @EID
						AND SUBSTRING(CONVERT(VARCHAR(12), FDATE, 106), 4, 8) = SUBSTRING(CONVERT(VARCHAR(12), @VFD, 106), 4, 8)
						AND ID = @K
					END

					
				END

				SET @EncashDays = 0

				Select @EncashDays = SUM(EncashDays)
				From #ALLEMPVACDATA
				WHERE EmpSeqNo= @EID 
				AND FromDate BETWEEN @VFD AND @VTD



				SET @STRVACDAYS = @STRVACDAYS + @EncashDays

				SELECT @STRFROMDATERANGE = ISNULL(@STRFROMDATERANGE, '') + CONVERT(NVARCHAR, CONVERT(DATETIME, @VFD), 106)
					,@STRTODATERANGE = ISNULL(@STRTODATERANGE, '') + CONVERT(NVARCHAR, CONVERT(DATETIME, @VTD), 106)
				FROM #TABVAC
				WHERE ID = @J

				SET @STRFROMDATERANGE = @STRFROMDATERANGE + CHAR(10)
				SET @STRTODATERANGE = @STRTODATERANGE + CHAR(10)

				UPDATE @MonthDays
				SET VACSTARTDATE = @STRFROMDATERANGE
					,VACENDDATE = @STRTODATERANGE
					,VACDAYS = isnull(VACDAYS, 0) + @STRVACDAYS
				WHERE EMPNODE = @EID
					AND SUBSTRING(CONVERT(VARCHAR(12), FDATE, 106), 4, 8) = SUBSTRING(CONVERT(VARCHAR(12), @FMONTH, 106), 4, 8)
					AND ID = @K
			END
			ELSE
			BEGIN
				IF (SUBSTRING(CONVERT(VARCHAR(12), @VFD, 106), 4, 8) <> SUBSTRING(CONVERT(VARCHAR(12), @VTD, 106), 4, 8))
				BEGIN
					SET @VacTaken=0 SET @EnDays=0
					EXEC spPAY_GetVacationLeavesInfo @VFD
						,@TMONTH
						,@EID
						,1
						,1
						,1,@VacTaken OUTPUT,@EnDays OUTPUT

						SET @STRVACDAYS=@VacTaken
				END
				ELSE
					SET @STRVACDAYS = @VDays

				SET @VT=@STRVACDAYS
				
				IF(ISNULL(@Calculatevacdayforvacationperiod,'NO')='NO')
				BEGIN
					SET @VT=@STRVACDAYS
					
					UPDATE @MonthDays
					SET ACTUALDAYS=TOTALDAYS-@VT-ISNULL(@LOPDAYS,0)
					WHERE EMPNODE = @EID
					AND SUBSTRING(CONVERT(VARCHAR(12), FDATE, 106), 4, 8) = SUBSTRING(CONVERT(VARCHAR(12), @VFD, 106), 4, 8)
					AND ID = @K

					IF(@CreditDaysCalculation=1)
					BEGIN
						UPDATE @MonthDays
						SET Days = ROUND((( CAST(ACTUALDAYS AS FLOAT) * CAST(DAYSASON AS FLOAT) ) / CAST(TOTALDAYS AS FLOAT)),2,1),
						DAYSASON = ROUND((( CAST(ACTUALDAYS AS FLOAT) * CAST(DAYSASON AS FLOAT) ) / CAST(TOTALDAYS AS FLOAT)),2,1)
						WHERE EMPNODE = @EID
						AND SUBSTRING(CONVERT(VARCHAR(12), FDATE, 106), 4, 8) = SUBSTRING(CONVERT(VARCHAR(12), @VFD, 106), 4, 8)
						AND ID = @K
					END
					ELSE
					BEGIN
						UPDATE @MonthDays
						SET Days = ROUND((( CAST(@VacDaysPerMonth AS FLOAT) / CAST(365 AS FLOAT) )* CAST(ACTUALDAYS AS FLOAT) ),2,1),
						DAYSASON = ROUND((( CAST(@VacDaysPerMonth AS FLOAT) / CAST(365 AS FLOAT) )* CAST(ACTUALDAYS AS FLOAT) ),2,1)
						WHERE EMPNODE = @EID
						AND SUBSTRING(CONVERT(VARCHAR(12), FDATE, 106), 4, 8) = SUBSTRING(CONVERT(VARCHAR(12), @VFD, 106), 4, 8)
						AND ID = @K
					END

					
				END

				SET @EncashDays = 0

				Select @EncashDays = SUM(EncashDays)
				From #ALLEMPVACDATA
				WHERE EmpSeqNo= @EID 
				AND FromDate BETWEEN @VFD AND @VTD


				SET @STRVACDAYS = @STRVACDAYS + @EncashDays


				SELECT @STRFROMDATERANGE = ISNULL(@STRFROMDATERANGE, '') + CONVERT(NVARCHAR, CONVERT(DATETIME, @VFD), 106)
					,@STRTODATERANGE = ISNULL(@STRTODATERANGE, '') + CONVERT(NVARCHAR, CONVERT(DATETIME, @TMONTH), 106)
				FROM #TABVAC
				WHERE ID = @J

				SET @STRFROMDATERANGE = @STRFROMDATERANGE + CHAR(10)
				SET @STRTODATERANGE = @STRTODATERANGE + CHAR(10)
				
				UPDATE @MonthDays
				SET VACSTARTDATE = @STRFROMDATERANGE
					,VACENDDATE = @STRTODATERANGE
					,VACDAYS = isnull(VACDAYS, 0) + @STRVACDAYS
				WHERE EMPNODE = @EID
					AND SUBSTRING(CONVERT(VARCHAR(12), FDATE, 106), 4, 8) = SUBSTRING(CONVERT(VARCHAR(12), @VFD, 106), 4, 8)
					AND ID = @K
			END
		END
		ELSE
		BEGIN
			IF (@VTD <= @TMONTH)
			BEGIN
				IF (SUBSTRING(CONVERT(VARCHAR(12), @VFD, 106), 4, 8) <> SUBSTRING(CONVERT(VARCHAR(12), @VTD, 106), 4, 8))
				BEGIN
					SET @VacTaken=0 SET @EnDays=0
					EXEC spPAY_GetVacationLeavesInfo @FMONTH
						,@VTD
						,@EID
						,1
						,1
						,1,@VacTaken OUTPUT,@EnDays OUTPUT

						SET @STRVACDAYS=@VacTaken
				END
				ELSE
					SET @STRVACDAYS = @VDays
				
				SET @VT=@STRVACDAYS

				SELECT @STRFROMDATERANGE = ISNULL(@STRFROMDATERANGE, '') + CONVERT(NVARCHAR, CONVERT(DATETIME, @FMONTH), 106)
					,@STRTODATERANGE = ISNULL(@STRTODATERANGE, '') + CONVERT(NVARCHAR, CONVERT(DATETIME, @VTD), 106)
				FROM #TABVAC
				WHERE ID = @J

				SET @STRFROMDATERANGE = @STRFROMDATERANGE + CHAR(10)
				SET @STRTODATERANGE = @STRTODATERANGE + CHAR(10)

				UPDATE @MonthDays
				SET VACSTARTDATE = @STRFROMDATERANGE
					,VACENDDATE = @STRTODATERANGE
					,VACDAYS = isnull(VACDAYS, 0) + @STRVACDAYS
				WHERE EMPNODE = @EID
					AND SUBSTRING(CONVERT(VARCHAR(12), FDATE, 106), 4, 8) = SUBSTRING(CONVERT(VARCHAR(12), @VTD, 106), 4, 8)
					AND ID = @K
			END
			ELSE
			BEGIN
			
				IF (SUBSTRING(CONVERT(VARCHAR(12), @VFD, 106), 4, 8) <> SUBSTRING(CONVERT(VARCHAR(12), @VTD, 106), 4, 8))
				BEGIN
					SET @VacTaken=0 SET @EnDays=0
					EXEC spPAY_GetVacationLeavesInfo @FMONTH
						,@TMONTH
						,@EID
						,1
						,1
						,1,@VacTaken OUTPUT,@EnDays OUTPUT

						SET @STRVACDAYS=@VacTaken
						
				END
				ELSE
					SET @STRVACDAYS = @VDays

				SET @VT=@STRVACDAYS

				SELECT @STRFROMDATERANGE = ISNULL(@STRFROMDATERANGE, '') + CONVERT(NVARCHAR, CONVERT(DATETIME, @FMONTH), 106)
					,@STRTODATERANGE = ISNULL(@STRTODATERANGE, '') + CONVERT(NVARCHAR, CONVERT(DATETIME, @TMONTH), 106)
				FROM #TABVAC
				WHERE ID = @J

				SET @STRFROMDATERANGE = @STRFROMDATERANGE + CHAR(10)
				SET @STRTODATERANGE = @STRTODATERANGE + CHAR(10)

				UPDATE @MonthDays
				SET VACSTARTDATE = @STRFROMDATERANGE
					,VACENDDATE = @STRTODATERANGE
					,VACDAYS = isnull(VACDAYS, 0) + @STRVACDAYS
				WHERE EMPNODE = @EID
					AND SUBSTRING(CONVERT(VARCHAR(12), FDATE, 106), 4, 8) = SUBSTRING(CONVERT(VARCHAR(12), @FMONTH, 106), 4, 8)
					AND ID = @K
			END
		END

		FETCH NEXT FROM CUR2 INTO @J,@VFD,@VTD,@VDays
	END
	CLOSE CUR2
	DEALLOCATE CUR2
	
	--START-- FINAL SETTLEMENT ENCASH DAYS
		SET @FSENCASHDAYS=0
				SELECT @FSENCASHDAYS=ISNULL(SUM(FSEncashDays),0) 
				FROM #ALLEMPFSENCASHDATA
				WHERE EmpSeqNo= @EID 
				AND ResgDate BETWEEN @FMONTH AND @TMONTH

				SELECT @STRFROMDATERANGE = ISNULL(@STRFROMDATERANGE, '') + CONVERT(NVARCHAR, CONVERT(DATETIME, ResgDate), 106)
					,@STRTODATERANGE = ISNULL(@STRTODATERANGE, '') + CONVERT(NVARCHAR, CONVERT(DATETIME, ResgDate), 106)
					FROM #ALLEMPFSENCASHDATA
					WHERE EmpSeqNo= @EID 
					AND ResgDate BETWEEN @FMONTH AND @TMONTH

				SET @STRFROMDATERANGE = @STRFROMDATERANGE + CHAR(10)
				SET @STRTODATERANGE = @STRTODATERANGE + CHAR(10)
				

				UPDATE @MonthDays
				SET VACSTARTDATE = @STRFROMDATERANGE
					,VACENDDATE = @STRTODATERANGE 
					,VACDAYS = isnull(VACDAYS, 0) + @FSENCASHDAYS
					WHERE EMPNODE = @EID
					AND SUBSTRING(CONVERT(VARCHAR(12), FDATE, 106), 4, 8) = SUBSTRING(CONVERT(VARCHAR(12), @FMONTH, 106), 4, 8)
					AND ID = @K
	--END-- FINAL SETTLEMENT ENCASH DAYS


	--if(@k=44)
	--SELECT @ACVDAYS,VACDAYS FROM @MonthDays WHERE ID = @K

	select @FDate=FDate,@TDate=TDate,@BDays=(BALANCE - VACDAYS) FROM @MonthDays WHERE ID = @K AND EMPNODE = @EID
	

IF( @DonotshownegitiveOPvacationdays='True' AND EXISTS (
	Select ExcessDays FROM #ALLEMPVACDATA WHERE EmpSeqNo=@EID AND ToDate BETWEEN @FDate AND @TDate AND ExcessDays>0 AND @BDays<0 ) )

	BEGIN
				declare @RDays FLOAT
		SET @RDays=0
		IF(@VTD<@TDate)
			SELECT @RDays= ROUND((( ((CAST(TOTALDAYS AS FLOAT)-CAST(DATEPART(d,@VTD) AS FLOAT))) * CAST(DAYSASON AS FLOAT) ) / CAST(TOTALDAYS AS FLOAT)),2,1) FROM @MonthDays  WHERE ID = @K
			AND VACENDDATE<>''

		UPDATE @MonthDays
		SET BALANCE = @RDays
		WHERE ID = @K
		AND EMPNODE = @EID
	END
	ELSE
	BEGIN
		UPDATE @MonthDays
		SET BALANCE = (BALANCE - VACDAYS)
		WHERE ID = @K
		AND EMPNODE = @EID
	END

	
-----------------

FETCH NEXT FROM CUR1 INTO @K,@FMONTH,@TMONTH,@EID
END
CLOSE CUR1
DEALLOCATE CUR1
	
UPDATE T
SET T.OPENINGBAL = T.OPENINGBAL + (T1.DAYS)
	,T.BALANCE = T.BALANCE + T1.DAYS
FROM @MonthDays T1
	,@MonthDays T
WHERE T.EMPNODE = T1.EMPNODE
	AND T1.FDATE = T.OPBDATE
	AND T1.FDATE < @STARTDATE


UPDATE T
SET T.DAYS = T.DAYS + (
		SELECT SUM(DAYS)
		FROM @MONTHDAYS T1
		WHERE T1.EMPNAME <> 'OPENING'
			AND T1.EMPNODE = T.EMPNODE
			AND T1.FDATE < @STARTDATE
			AND T1.FDATE <> isnull(T.OPBDATE,0)
		)
	,T.BALANCE = T.BALANCE + (
		SELECT SUM(DAYS)
		FROM @MONTHDAYS T1
		WHERE T1.EMPNAME <> 'OPENING'
			AND T1.EMPNODE = T.EMPNODE
			AND T1.FDATE < @STARTDATE
			AND T1.FDATE <> isnull(T.OPBDATE,0)
		)
FROM @MONTHDAYS T
WHERE T.EMPNAME = 'OPENING'


UPDATE T
SET T.DAYS = T.DAYS - (
		SELECT SUM(VACDAYS)
		FROM @MONTHDAYS T1
		WHERE T1.EMPNAME <> 'OPENING'
			AND T1.EMPNODE = T.EMPNODE
			AND T1.FDATE < @STARTDATE
			AND T1.FDATE <> isnull(T.OPBDATE,0)
		)
	,T.BALANCE = T.BALANCE - (
		SELECT SUM(VACDAYS)
		FROM @MONTHDAYS T1
		WHERE T1.EMPNAME <> 'OPENING'
			AND T1.EMPNODE = T.EMPNODE
			AND T1.FDATE < @STARTDATE
			AND T1.FDATE <> isnull(T.OPBDATE,0)
		)
FROM @MONTHDAYS T
WHERE T.EMPNAME = 'OPENING'



UPDATE @MonthDays
SET Days = isnull(Days, 0) + OPENINGBAL
	,Balance = isnull(Days, 0) + OPENINGBAL
FROM @MonthDays
WHERE EMPNAME = 'OPENING'

SELECT *
FROM @MonthDays
WHERE EMPNAME = 'OPENING'

UNION

SELECT *
FROM @MonthDays
WHERE EMPNAME <> 'OPENING'
	AND FDATE >= @STARTDATE

DROP TABLE #TABVAC

DROP TABLE #VMDD
DROP TABLE #VacMonthWiseAllotedDays

DROP TABLE #ALLEMPVACDATA
DROP TABLE #ALLVACMGTDATA
DROP TABLE #ALLEMPMONDATA
DROP TABLE #ALLEMPFSENCASHDATA


SET NOCOUNT OFF
GO
